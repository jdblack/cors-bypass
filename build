#!/bin/bash -e

main() {
  source AppInfo.txt

  case $1 in
    publish)
      assert_git_clean
      local version=$(cur_version "$MAJOR" "$MINOR")
      push_docker_images "$APP_NAME" "$version" "$REGISTRIES" 
      push_helm_chart "$APP_NAME" "$version" "$REGISTRIES"
      ;;
    help)
      echo "You provided an unrecognized command: $1"
      echo "Available commands: build, publish"
      ;;
    build|*)
      local version=$(next_version "$MAJOR" "$MINOR")
      update_chart_version "$version"
      build_docker_images "$APP_NAME"
      update_chart_version "$version"
      package_helm_chart
      echo "=============================================="
      echo -e "\033[32mVersion $version built. Now commit to git and run: \033[33m  ./build publish\033[0m"
      echo "=============================================="
      git diff --stat
      ;;
  esac
}


function assert_git_clean() {
  if [[ -z $(git status --porcelain) ]]; then
    return 0
  fi

  echo "Aborting script because the Git tree is not clean."
  exit 1
}


next_version() {
  local major="$1"
  local minor="$2"
  local patch=$(git rev-list --count HEAD)  # Declare patch as local
  patch=$[patch+1]
  echo "${major}.${minor}.${patch}"
}

cur_version() {
  local major="$1"
  local minor="$2"
  local patch=$(git rev-list --count HEAD)  # Declare patch as local

  echo "${major}.${minor}.${patch}"
}

# Function to update Chart.yaml with the new version
update_chart_version() {
  local version="$1"
  if [[ -f chart/Chart.yaml ]]; then
    sed -i.bak "s/version: .*/version: ${version}/" chart/Chart.yaml
    sed -i.bak "s/appVersion: .*/appVersion: v${version}/" chart/Chart.yaml
  else
    echo "Error: chart/Chart.yaml not found!" >&2
    exit 1
  fi
}

build_docker_images() {
  local app_name="$1"
  docker build -t "${app_name}:latest" .
}

# Function to push Docker images to registries
push_docker_images() {
  local app_name="$1"
  local version="$2"
  local registries="$3"
  for REGISTRY in ${registries//,/ }; do
    docker tag "${app_name}:latest" "${REGISTRY}/${app_name}:latest"
    docker tag "${app_name}:latest" "${REGISTRY}/${app_name}:v${version}"
    docker push ${REGISTRY}/${app_name}:latest
    docker push ${REGISTRY}/${app_name}:v${version}
  done

}

# Function tdocker push "${REGISTRY}/${app_name}:latest"o package the Helm chart
package_helm_chart() {
  helm package chart
}

# Function to push Helm chart to registry
push_helm_chart() {
  local app_name="$1"
  local version="$2"
  local registries="$3"
  for REGISTRY in ${registries//,/ }; do
    CHART_PACKAGE="${app_name}-chart-${version}.tgz"
    if [[ -f "$CHART_PACKAGE" ]]; then
      helm push $CHART_PACKAGE oci://$REGISTRY
      echo "Pushed Helm chart to ${REGISTRY}"
    else
      echo "Error: Chart package ${CHART_PACKAGE} not found!" >&2
    fi
  done
}

main $@

